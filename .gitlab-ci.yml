# This is the Gradle build system for JVM applications
# https://gradle.org/
# https://github.com/gradle/gradle

image: gradle:alpine

# Disable the Gradle daemon for Continuous Integration servers as correctness
# is usually a priority over speed in CI environments. Using a fresh
# runtime for each build is more reliable since the runtime is completely
# isolated from any previous builds.
variables:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"
  DB_URL: "$DB_URL"

before_script:
  - echo "$DB_URL"
  - cd `pwd`/read4share
  - export GRADLE_USER_HOME=.gradle
  # Inject variables in application.properties file
  - mkdir src/main/resources
  #- echo "$DB_URL" >> src/main/resources/application.properties
  #- echo "$DB_USER_NAME" >> src/main/resources/application.properties
  #- echo "$DB_PSW" >> src/main/resources/application.properties
  #- echo "$CI_JOB_STAGE"
  #- cat "$DB_ACCESS"
  #- cat $DB_ACCESS > src/main/resources/application.properties

stages:
# - build
 - test
# - analyze

#build:
#  stage: build
#  script:
#    - gradle --build-cache assemble
#  cache:
#    key: "$CI_COMMIT_REF_NAME"
#    policy: push
#    paths:
#      - build
#      - .gradle

test:
  stage: test
  script:
    - echo "Running tests"
    - gradle check
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: pull
    paths:
      - build
      - .gradle

#sonarqube:
#  stage: analyze
#  script:
#    - echo "Running Sonarqube analysis"
#    - gradle sonarqube -Dsonar.login="$SONAR_TOKEN"
#  allow_failure: true
#  only:
#    - main # analyze only the main branch
