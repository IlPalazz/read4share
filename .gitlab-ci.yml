# This is the Gradle build system for JVM applications
# https://gradle.org/
# https://github.com/gradle/gradle

image: gradle:alpine

# Disable the Gradle daemon for Continuous Integration servers as correctness
# is usually a priority over speed in CI environments. Using a fresh
# runtime for each build is more reliable since the runtime is completely
# isolated from any previous builds.
variables:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"

before_script:
  - cd `pwd`/read4share
  - export GRADLE_USER_HOME=.gradle
  # Inject variables in application.properties file
  - echo "$DB_URL" >> src/main/resources/application.properties
  - echo "$DB_USER" >> src/main/resources/application.properties
  - echo "$DB_PSW" >> src/main/resources/application.properties
  - echo "$JWT_KEY" >> src/main/resources/application.properties

  # Create application.properties file for tests
  - mkdir src/test/resources
  - echo "$TEST_CONFIG" >> src/test/resources/application.properties
  - echo "$JWT_KEY" >> src/test/resources/application.properties

stages:
 - build
 - test
# - analyze

build:
  stage: build
  script:
    - gradle --build-cache assemble
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: push
    paths:
      - build
      - .gradle

test:
  stage: test
  script:
    - echo "Running tests"
    - gradle check
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: pull
    paths:
      - build
      - .gradle

#sonarqube:
#  stage: analyze
#  script:
#    - echo "Running Sonarqube analysis"
#    - gradle sonarqube -Dsonar.login="$SONAR_TOKEN"
#  allow_failure: true
#  only:
#    - main # analyze only the main branch
